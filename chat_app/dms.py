
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label
import client
import dm

def dms(chat_client: client.ChatClient):
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")


    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)

    users = set(message['from_user'] for message in chat_client.messages)
    if chat_client.username in users:
        set.remove(users, chat_client.username)

    window = Tk()

    window.geometry("1920x1080")
    window.configure(bg = "#FFFFFF")


    def draw_rounded_rectangle(canvas, x, y, width, height, radius, color):
        canvas.create_rectangle(
            x + radius,
            y,
            x + width - radius,
            y + height,
            fill=color,
            outline=color
        )
        canvas.create_rectangle(
            x,
            y + radius,
            x + width,
            y + height - radius,
            fill=color,
            outline=color
        )
        canvas.create_oval(
            x,
            y,
            x + 2 * radius,
            y + 2 * radius,
            fill=color,
            outline=color
        )
        canvas.create_oval(
            x + width - 2 * radius,
            y,
            x + width,
            y + 2 * radius,
            fill=color,
            outline=color
        )
        canvas.create_oval(
            x,
            y + height - 2 * radius,
            x + 2 * radius,
            y + height,
            fill=color,
            outline=color
        )
        canvas.create_oval(
            x + width - 2 * radius,
            y + height - 2 * radius,
            x + width,
            y + height,
            fill=color,
            outline=color
        )

    def draw_circle(canvas, x, y, diameter, color):
        canvas.create_oval(x, y, x + diameter, y + diameter, fill=color, outline="")
    
    def circle_click(button_username):
        window.destroy()
        dm.dm(chat_client, button_username)

    def dm_button(canvas, x, y, diameter, color, button_username):
        def on_click():
            circle_click(button_username)

        button = Button(canvas, text="Enter This DM", command=on_click, bg=color, bd=0, activebackground=color)
        button.place(x=x, y=y, width=diameter, height=diameter)

    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 1080,
        width = 1920,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    # background rectangle
    canvas.create_rectangle(
        483.0,
        129.0,
        1437.0,
        952.0,
        fill="#332222",
        outline="")
    
    error_label = Label(window, text="", fg="red")  # Label to show error message


    #for each user do a rectangle whiteish circle, head, and body
    for i, user in enumerate(users):
        # user label
        canvas.create_text(
            680.0,
            330.0 + i * 180.0,
            anchor="nw",
            text= user,
            fill="#FFFFFF",
            font=("Inter", 30 * -1)
        )

        # DM rectangles
        draw_rounded_rectangle(canvas, 623.0, 362.0 + i * 180.0, 675.0, 89.0, 35.0, "#800909")

        # button
        dm_button(canvas, 1300.0, 340.0 + i * 179.0, 132.0, "#FFFFFF", user)

        # circle pfp backgrounds
        draw_circle(canvas, 557.0, 340.0 + i * 179.0, 132.0, "#D9D9D9")

        # heads
        draw_circle(canvas, 600.0, 360.0 + i * 179.0, 646.0 - 600.0, "#999999")

        # bodies
        x1, y1 = 584.0, 404.0 + i * 179.0
        x2, y2 = 663.0, 492.0 + i * 179.0

        canvas.create_arc(
            x1, y1, x2, y2,
            start=357, extent=186,
            fill="#999999", outline=""
        )
        if (i > 2): # only show 3 users
            break

    canvas.create_text(
        881.0,
        181.0,
        anchor="nw",
        text="DMs",
        fill="#FFFFFF",
        font=("Inter", 60 * -1)
    )

    def new_dm():
        message_text = message_entry.get()  # Get the text from the Entry widget
        if message_text == "":
            return
        # Clear the Entry widget after sending the message
        message_entry.delete(0, 'end')
        # Code to send the message using chat_client
        window.destroy()
        dm.dm(chat_client, message_text)

    def on_closing():
        chat_client.is_closed = True
        print(chat_client.is_closed)
        window.destroy()

    window.protocol("WM_DELETE_WINDOW", on_closing)

    def logout():
        response = chat_client.goodbye()

        if response.fields["status"] == 100:
            window.destroy()
            chat_client.is_closed = True
            import login
            login.login()
        else:
            print("Logout failed, status code:", response.fields["status"])

            window.after(100, lambda: show_error_message(response.fields["status"]))

    def show_error_message(status):
        error_label.place(x=580, y=250)
        error_label.config(text=f"Error occurred: {status}", fg="red", font=("Arial", 25))


    # Create an Entry widget for typing the message
    message_entry = Entry(window, font=("Inter", 12))
    message_entry.place(x=600, y=900)

    # Create a Button to send the message
    send_button = Button(window, text="Open New/Old DM", command=new_dm)
    send_button.place(x=900, y=900)

    logout_button = Button(window, text="Logout", command=logout)
    logout_button.place(x=1150, y=200)

    window.resizable(False, False)
    window.mainloop()
